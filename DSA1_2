1.You are given an ArrayList of integers representing stock prices on consecutive days. Write a method to find the maximum profit you can achieve from a single buy and sell transaction. If you cannot achieve any profit, return 0.
Input: [7, 1, 5, 3, 6, 4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Input: [7, 6, 4, 3, 1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
--
Time: O(n), Space: O(1)
def max_profit(prices):
    min_price = float('inf')
    max_profit = 0
    for price in prices:
        min_price = min(min_price, price)
        max_profit = max(max_profit, price - min_price)
    return max_profit





2. You are given an ArrayList of integers. Write a method to find all pairs of integers in the ArrayList whose sum is equal to a given target value.
Input: [1, 2, 3, 4, 5], target = 5
Output: [[1, 4], [2, 3]]
Explanation: Pairs (1, 4) and (2, 3) add up to 5.
Input: [1, 1, 1, 2, 3, 4], target = 5
Output: [[1, 4], [1, 4], [2, 3]]
Explanation: Pairs (1, 4), (1, 4), and (2, 3) add up to 5.



--
Time: O(n), Space: O(n)
def two_sum_pairs(arr, target):
    seen = {}
    result = []
    for num in arr:
        complement = target - num
        if complement in seen:
            result.append([complement, num])
        seen[num] = seen.get(num, 0) + 1
    return result


3.You are given a list of intervals, where each interval is represented as a pair of integers [start, end]. Write a method to merge all overlapping intervals and return the list of merged intervals.
Input: [[1, 3], [2, 6], [8, 10], [15, 18]]
Output: [[1, 6], [8, 10], [15, 18]]
Explanation: Intervals [1, 3] and [2, 6] overlap and are merged into [1, 6].
Input: [[1, 4], [4, 5]]
Output: [[1, 5]]
Explanation: Intervals [1, 4] and [4, 5] overlap and are merged into [1, 5].

--
Time: O(n log n), Space: O(n)
def merge_intervals(intervals):
    intervals.sort(key=lambda x: x[0])
    merged = []
    for interval in intervals:
        if not merged or merged[-1][1] < interval[0]:
            merged.append(interval)
        else:
            merged[-1][1] = max(merged[-1][1], interval[1])
    return merged




4.You are given a string. Write a method to find the first non-repeating character in it and return its index. If it doesn't exist, return -1.
Input: "leetcode"
Output: 0
Explanation: The first non-repeating character is 'l', which is at index 0.
Input: "loveleetcode"
Output: 2
Explanation: The first non-repeating character is 'v', which is at index 2.
Input: "aabb"
Output: -1
Explanation: There are no non-repeating characters.

--
Time: O(n), Space: O(1)
def first_unique_char(s):
    count = {}
    for c in s:
        count[c] = count.get(c, 0) + 1
    for i, c in enumerate(s):
        if count[c] == 1:
            return i
    return -1



5. You are given a list of strings words and a string pattern. Write a method to find all strings in words that match the given pattern. A string matches the pattern if there is a bijection between a letter in pattern and a letter in the string. Return the list of matching strings.
Input: words = ["abc", "deq", "mee", "aqq", "dkd", "ccc"], pattern = "abb"
Output: ["mee", "aqq"]
Explanation: "mee" matches the pattern "abb" (m -> a, e -> b, e -> b). "aqq" matches the pattern "abb" (a -> a, q -> b, q -> b).

--
Time: O(n * k), Space: O(n)
def find_and_replace_pattern(words, pattern):
    def encode(word):
        mapping = {}
        code = []
        i = 0
        for char in word:
            if char not in mapping:
                mapping[char] = i
                i += 1
            code.append(mapping[char])
        return code
    return [word for word in words if encode(word) == encode(pattern)]






1. How does binary search work, and what is its time complexity? Write code for binary search.

--
Time: O(log n), Space: O(1)
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1



2. You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Input: list1 = [1, 2, 4], list2 = [1, 3, 4]
Output: [1, 1, 2, 3, 4, 4]

--

Time: O(n + m), Space: O(1)
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def merge_two_lists(l1, l2):
    dummy = ListNode()
    tail = dummy
    while l1 and l2:
        if l1.val < l2.val:
            tail.next, l1 = l1, l1.next
        else:
            tail.next, l2 = l2, l2.next
        tail = tail.next
    tail.next = l1 or l2
    return dummy.next



3. Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length. Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.
Input: nums = [1, 1, 2]
Output: 2, nums = [1, 2]


---
Time: O(n), Space: O(1)
def remove_duplicates(nums):
    if not nums:
        return 0
    i = 0
    for j in range(1, len(nums)):
        if nums[j] != nums[i]:
            i += 1
            nums[i] = nums[j]
    return i + 1



4. Given an array, rotate the array to the right by k steps, where k is non-negative.
Input: nums = [1, 2, 3, 4, 5, 6, 7], k = 3
Output: [5, 6, 7, 1, 2, 3, 4]

--
Time: O(n), Space: O(1)
def rotate(nums, k):
    k %= len(nums)
    nums[:] = nums[-k:] + nums[:-k]

5. Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Input: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
Output: 6
Explanation: [4, -1, 2, 1] has the largest sum = 6.

Time: O(n), Space: O(1)
def max_subarray(nums):
    max_sum = current_sum = nums[0]
    for num in nums[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum



6. Given an array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Input: nums = [0, 1, 0, 3, 12]
Output: [1, 3, 12, 0, 0]


---
Time: O(n), Space: O(1)
def move_zeroes(nums):
    last_non_zero = 0
    for i in range(len(nums)):
        if nums[i] != 0:
            nums[i], nums[last_non_zero] = nums[last_non_zero], nums[i]
            last_non_zero += 1
